#version 460 core

struct particle {
    vec3 position;
    vec3 velocity;
    vec3 scale;
    vec3 accel;
    vec4 color;
    float life;
};

layout(location = 0) uniform float DeltaTime;

layout (std430, binding = 0) buffer SSBO_0 {
    particle Particles[];
};

layout(std430, binding = 1) coherent restrict buffer SSBO_1 {
    int count;
    int indices[];
}freelist;

void UpdateParticle(inout particle Particle, int index) {
    if (Particle.life > 0) {
        Particle.velocity += Particle.accel * DeltaTime;
        Particle.position += Particle.velocity * DeltaTime;
        Particle.life -= DeltaTime;

        if (Particle.life <= 0.0) {
            Particle.life = -1.0;
            Particle.color.a = 0.0; // make the particle invisible
            freelist.indices[atomicAdd(freelist.count, 1)] = index;
        }
    }
}

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= Particles.length())
    return;

    UpdateParticle(Particles[index], int(index));
}